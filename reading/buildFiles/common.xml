<project name="common">

    <!-- set global properties for this build -->
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="jsp/WEB-INF"/>
    <property name="docs" location="docs"/>

    <property name="webapp.path" location="jsp" />

    <property file="properties/hopper.properties" />
    <property file="properties/log4j.properties" />
    <property file="properties/release.properties" />

    <taskdef file="properties/tomcat.tasks.properties">
        <classpath>
            <pathelement path="${tomcat.home}/lib/catalina-ant.jar"/>
        </classpath>
    </taskdef>
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <propertyset id="script.config.properties">
	<propertyref prefix="org.xml" />
	<propertyref prefix="annotate" />
	<propertyref prefix="perseus" />
	<propertyref prefix="xml" />
	<propertyref prefix="log4j" />
        <propertyref prefix="hibernate" />

	<propertyref name="java.naming.factory.initial" />
    </propertyset>

    <propertyset id="hibernate.properties">
	<propertyref prefix="hibernate" />
    </propertyset>

    <path id="compile.class.path">
        <fileset dir="lib/endorsed">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${dist}/lib">
	    	<include name="**/*.jar" />
        </fileset>
    </path>

    <!-- For the Hibernate Ant tools -->
    <path id="hibernate.class.path">
        <fileset dir="jsp/WEB-INF">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="lib">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <path id="test.class.path">
        <fileset dir="${dist}/lib">
            <include name="**/*.jar" />
        </fileset>
        <pathelement path="${dist}/lib/annotate.jar" />
    </path>

    <!--
	This target creates a jar from a given directory, after expanding
	all the properties of everything it can find in the directory.
	It's provided as a convenience target, so that we can create
	jars with different expanded properties for different build types.
    -->
    <target name="create-jar">
	<property name="file.set" value="all.build.files" />
	<property name="jar.basedir" value="${build}" />
	<tempfile prefix="jar-" property="temp.build.dir" />
	<!-- Make sure *not* to expand properties for class files. Amazingly
	     enough, expanding them results in bad magic numbers, apparently
	     because there are actually strings in the binary files that match
	     the names of Ant properties.
	-->
	<copy todir="${temp.build.dir}">
	    <fileset dir="${jar.basedir}">
		<include name="**/*.class" />
	    </fileset>
	</copy>
	<copy file="properties/hopper.properties" todir="${temp.build.dir}" />
	<!-- Everything else is fine, though - UNLESS the user wants to
	     exclude non-class files. -->
	<copy todir="${temp.build.dir}">
	    <fileset dir="${jar.basedir}">
		<exclude name="**/*.class" />
	    </fileset>

	    <filterchain>
		<expandproperties />
	    </filterchain>
	</copy>

	<!-- Now actually create the JAR and delete the temporary
	     directory. -->
	<jar jarfile="${jarfile}" basedir="${temp.build.dir}"
	     excludes="${excludes}" />
	<delete dir="${temp.build.dir}" />
    </target>
</project>
